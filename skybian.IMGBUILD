pkgname=skybian-img
pkgdesc="Skybian image build"
pkgver='0.6.0'
pkgrel=7
arch=('any')
_imgarch="arm64"
_hostarch=$(dpkg --print-architecture)
_img="Armbian_21.08.1_Orangepiprime_buster_current_5.10.60.img"
_imgxz=${_img}.xz
_xzlink="https://mirrors.netix.net/armbian/dl/orangepiprime/archive/Armbian_21.08.1_Orangepiprime_buster_current_5.10.60.img.xz"
_torrent="${_xzlink}.torrent"
_imgfinal="skybian-${pkgver}.img"
_root_partition=/dev/loop0p1
_defaultuser=root
#_aptrepo="http://deb.skywire.skycoin.com"
_aptrepo="http://176.9.28.105" #omit DNS issues by using server IP
_aptrepo_config="deb ${_aptrepo} sid main"
_aptrepo1="http://deb.skywire.skycoin.com" #omit DNS issues by using server IP
_aptrepo1_config="deb ${_aptrepo1} sid main"
_skywiredeb="skywire-bin-${pkgver}-${pkgrel}-${_imgarch}.deb"
_skybiandeb="skybian-0.6.0-1-${_imgarch}.deb"
url="http://github.com/skycoin/skybian"
#_gz="Armbian_21.08.1_Orangepiprime_buster_current_5.10.60.img.xz"
#_gz=${_gz//"--"/"-"}
makedepends=('arch-install-scripts' 'aria2' 'dpkg' 'dtrx' 'gnome-disk-utility' 'qemu-arm-static' 'zip')
depends=()
source=("${_torrent}"
"${_torrent}.md5"
"${_aptrepo}/archive/${_skywiredeb}"
"${_aptrepo}/archive/${_skybiandeb}"
"${_aptrepo}/KEY.asc"
)
noextract=("${_skywiredeb}" "${_skybiandeb}")
sha256sums=('395af42127ac1f09588dc6bd87d9ba95cf720dfac2b95d8bab936fd5e3854b43'
            'e240f45d053650e6043f7e33cc113df43c2c90a5f3870742bedf76fa8e2bcf60'
            '3d1fafe5867b275888b8e3d4ba667d31c1cee7ba68afeef1031b8e684eed005a'
            '6ebb1297d5eff5aaabe622b26c5cea5e9954db48181162845f47de50230d5f7a'
            'SKIP')

#pkgver() {
#echo $(date +%Y%m%d)
#}

prepare() {
	cd "${srcdir}"
  if [[ ! -f ${_imgxz} ]] && [[ ! -f ../${_imgxz} ]]; then
		_msg2 "Downloading sources via torrent"
    # Download the assets via torrent - very fast!
    aria2c -V --seed-time=0 ${_torrent}
    mv ${_imgxz} ../${_imgxz}
  else
    _msg2 "found downloaded sources"
  fi
}

build() {
  #standard extraction utilities don't recognizes this archive for some reason.
  [[ ! -f ../${_img} ]] &&  _msg2 "extracting with dtrx" && dtrx ../${_imgxz} && mv ${_img} ../${_img}
	#_msg2 "checking imaage integrity"
  #md5sum -c *.md5 || exit 1
	_msg2 "copying image.." #so we don't have to extract it every time
  cp -b ../${_img} ${_imgfinal}
  _msg2 "adding extra space" #may not be necessary
  truncate -s +512M ${_imgfinal}
  echo ", +" | sfdisk -N1 ${_imgfinal}
	_msg2 "mounting image to loop device.."
  sudo gnome-disk-image-mounter -w ${_imgfinal}
	_msg2 "creating mount dir"
  mkdir -p ${srcdir}/mnt
  _msg2 "mounting ${_root_partition} to mount point"
  sudo mount ${_root_partition} ${srcdir}/mnt
	_msg2 "copy packages into image"
  sudo cp -b ${srcdir}/${_skywiredeb} ${srcdir}/mnt/root/${_skywiredeb}
  sudo cp -b ${srcdir}/${_skybiandeb} ${srcdir}/mnt/root/${_skybiandeb}
	_msg2 "copying repository signing key to root dir"
  sudo cp -b ${srcdir}/KEY.asc ${srcdir}/mnt/root/KEY.asc
	_msg2 "copy qemu-aarch64-static command to chroot bin"
  sudo cp "$(command -v qemu-aarch64-static)" "${srcdir}/mnt/usr/bin/"
################## chroot modifications for apt repo & package #################
#sudo is used for all commands to give correct environmental vars in chroot
  _msg2 "CHROOT: configuring package repository in /etc/apt/sources.list"
  cp ${srcdir}/mnt/etc/apt/sources.list ${srcdir}/sources.list
  sudo rm ${srcdir}/mnt/etc/apt/sources.list
  echo "${_aptrepo_config}" >> ${srcdir}/sources.list
  echo "${_aptrepo_config1}" >> ${srcdir}/sources.list
  sudo install -Dm644 ${srcdir}/sources.list ${srcdir}/mnt/etc/apt/sources.list
	_msg2 "CHROOT: add the repository signing key to apt keyring"
  sudo arch-chroot ${srcdir}/mnt sudo apt-key add /root/KEY.asc
	_msg2 "CHROOT: installing skywire with dpkg"
  sudo arch-chroot ${srcdir}/mnt sudo dpkg -i /root/${_skywiredeb}
  sudo arch-chroot ${srcdir}/mnt sudo rm /root/${_skywiredeb}
  _msg2 "CHROOT: installing skybian with dpkg" #the skybian package overwrites another package's file
  sudo arch-chroot ${srcdir}/mnt sudo dpkg --force-overwrite -i /root/${_skybiandeb}
  sudo arch-chroot ${srcdir}/mnt sudo rm /root/${_skybiandeb}
  sudo arch-chroot ${srcdir}/mnt sudo skybian-reset
## included from chroot-commands.sh
  _msg2 "CHROOT: Setting the chroot clock to now to avoid bugs with the date..."
  sudo arch-chroot ${srcdir}/mnt sudo /sbin/fake-hwclock save force
  _msg2 "CHROOT: Generating locale en_US.UTF-8..."
  sudo arch-chroot ${srcdir}/mnt sudo locale-gen en_US.UTF-8
#fix console / tty
  _msg2 "CHROOT: setting TERM=linux in /root/.bashrc"
  echo 'TERM=linux' | sudo arch-chroot ${srcdir}/mnt tee /root/.bashrc
#set env to detect that this is a skybian image
  _msg2 "CHROOT: setting SKYBIAN=true in /root/.bashrc"
  echo 'SKYBIAN=true' | sudo arch-chroot ${srcdir}/mnt tee /root/.bashrc
  _msg2 "CHROOT: configuring unattended-upgrades"
  #add the skybian apt repo
  head -n32 ${srcdir}/mnt/etc/apt/apt.conf.d/50unattended-upgrades > ${srcdir}/50unattended-upgrades
  echo '        "origin=skycoin,codename=sid,label=skycoin";' >> ${srcdir}/50unattended-upgrades
  tail -n 115 ${srcdir}/mnt/etc/apt/apt.conf.d/50unattended-upgrades >> ${srcdir}/50unattended-upgrades
  sudo rm ${srcdir}/mnt/etc/apt/apt.conf.d/50unattended-upgrades
  sudo install -Dm644 ${srcdir}/50unattended-upgrades ${srcdir}/mnt/etc/apt/apt.conf.d/50unattended-upgrades
  #debconf
  echo unattended-upgrades unattended-upgrades/enable_auto_updates boolean true | sudo arch-chroot ${srcdir}/mnt sudo debconf-set-selections
  sudo arch-chroot ${srcdir}/mnt sudo dpkg-reconfigure -f noninteractive unattended-upgrades
##Updating in the chroot can be done from an archlinux host of the same architecture
  _msg2 "Comparing host and chroot architecture"
  if [[ "${_hostarch}" == "${_imgarch}" ]] ; then
    _msg2 "CHROOT: updating image with apt..."
    sudo arch-chroot ${srcdir}/mnt sudo apt update
    sudo arch-chroot ${srcdir}/mnt sudo apt upgrade
    #sudo arch-chroot ${srcdir}/mnt sudo apt install skywire
  else
    _msg2 "Not updating chroot because of DNS issues with dissimilar architectures"
  fi
  ##set password for _defaultuser
  _msg2 "CHROOT: setting password skybian for ${_defaultuser}"
  echo ${_defaultuser}:skybian | sudo arch-chroot ${srcdir}/mnt sudo chpasswd
######################## end chroot modifications ##############################
  _msg2 "Unmounting image"
  sudo umount ${srcdir}/mnt
  _msg2 "detatching /dev/loop0"
  sudo losetup -d /dev/loop0
  mv ${_imgfinal} ../${_imgfinal}
  cd ..
  echo "created image(s):"
  ls $_imgfinal
}

package() {
  #Just let makepkg compress the archive as it does automatically for a package
  #afterwards remove the metadata from the archive and change the extension
  #avoid the compression step with makepkg --noarchive
  #package only, assuming ${_imgfinal} exists with makepkg -R
  install -Dm644 ${srcdir}/../${_imgfinal} ${pkgdir}/
  cd ${pkgdir}
  _msg2 "Creating image checksum"
  sha256sum ${_imgfinal} > ${_imgfinal}.sha
  cat ${_imgfinal}.sha
  if [[ ! -f ../../${pkgname}-${pkgver}-${pkgrel}-${_imgarch}.img.zip ]]; then
    cd ..
    _msg2 "Creating .zip archive for windows"
    zip -r ${pkgname}-${pkgver}-${pkgrel}-${_imgarch}.img.zip ${pkgname}
    mv *.zip ../
  fi
}

_msg2() {
(( QUIET )) && return
local mesg=$1; shift
printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@"
}
